@charset "UTF-8";

// Hamburgers
// @description Tasty CSS-animated hamburgers
// @author Jonathan Suh @jonsuh
// @site https://jonsuh.com/hamburgers
// @link https://github.com/jonsuh/hamburgers


// Settings
// ==================================================
$hamburger-padding-x                       : 15px !default;
$hamburger-padding-y                       : 15px !default;
$hamburger-layer-width                     : 40px !default;
$hamburger-layer-height                    : 4px !default;
$hamburger-layer-spacing                   : 6px !default;
$hamburger-layer-color                     : #000 !default;
$hamburger-layer-border-radius             : 4px !default;
$hamburger-hover-opacity                   : 0.7 !default;
$hamburger-hover-transition-duration       : 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter    : opacity(50%) !default;

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (
  collapse,
  collapse-r
) !default;

// Hamburger types
// ==================================================
@import "_collapse";
@import "_collapse-r";

// ==================================================
// Cooking up additional types:
//
// The Sass for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in $hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index($hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }

// Hamburger
// ==================================================
.hamburger {
  padding: $hamburger-padding-y $hamburger-padding-x;
  display: inline-block;
  cursor: pointer;

  transition-property: opacity, filter;
  transition-duration: $hamburger-hover-transition-duration;
  transition-timing-function: $hamburger-hover-transition-timing-function;

  // Normalize (<button>)
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;

  &:hover {
	@if $hamburger-hover-use-filter == true {
	  filter: $hamburger-hover-filter;
	}
	@else {
	  opacity: $hamburger-hover-opacity;
	}
  }
}

.hamburger-box {
  width: $hamburger-layer-width;
  height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: $hamburger-layer-height / -2;

  &,
  &::before,
  &::after {
	width: $hamburger-layer-width;
	height: $hamburger-layer-height;
	background-color: $hamburger-layer-color;
	border-radius: $hamburger-layer-border-radius;
	position: absolute;
	transition-property: transform;
	transition-duration: 0.15s;
	transition-timing-function: ease;
  }

  &::before,
  &::after {
	content: "";
	display: block;
  }

  &::before {
	top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }

  &::after {
	bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
}
